import collections
from typing import List
from collections import Counter, defaultdict


# üå∂Ô∏è 217. Contains Duplicate

# –ó–∞–¥–∞—á–∞: –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ nums. –ï—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã - –≤–µ—Ä–Ω—É—Ç—å True, –µ—Å–ª–∏ –Ω–µ—Ç - False
#
# 1) Time O(n) Space O(n)
# class Solution:
#     def containsDuplicate(self, nums: List[int]) -> bool:
#         hash_table = set()
#
#         for i in nums:
#             if i not in hash_table:
#                 hash_table.add(i)
#             else:
#                 return True
#
#         return False
#
#
# s = Solution()
# print(s.containsDuplicate(nums=[1, 2, 3, 1])) # true
# print(s.containsDuplicate(nums=[1, 2, 3, 4])) # false
# print(s.containsDuplicate(nums=[1, 1, 1, 3, 3, 4, 3, 2, 4, 2])) # true
#
# 2) Time O(n) Space O(n)
# -- –¢–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ —á—É—Ç—å –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞–Ω–æ
# class Solution:
#     def containsDuplicate(self, nums: List[int]) -> bool:
#         hash_table = set()
#
#         for i in nums:
#             if i in hash_table:
#                 return True
#             hash_table.add(i)
#
#         return False
#
#
# s = Solution()
# print(s.containsDuplicate(nums=[1, 2, 3, 1])) # true
# print(s.containsDuplicate(nums=[1, 2, 3, 4])) # false
# print(s.containsDuplicate(nums=[1, 1, 1, 3, 3, 4, 3, 2, 4, 2])) # true

#####################################################################################################

# üå∂Ô∏è 242. Valid Anagram
#
# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ s –∏ t. –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –∞–Ω–∞–≥—Ä–∞–º–º–æ–π (–∫–æ–≥–¥–∞ –∏–∑ –±—É–∫–≤
# –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ, –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å)
#
# 1) Time O(n) Space O(1)
# class Solution:
#     def isAnagram(self, s: str, t: str) -> bool:
#         if len(t) != len(s):
#             return False
#
#         return Counter(s) == Counter(t)
#
#
# s = Solution()
# print(s.isAnagram(s="anagram", t="nagaram"))  # true
# print(s.isAnagram(s="rat", t="car"))  # false
#
# 2) Time O(n) Space O( 1)
# -- –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è Counter
# class Solution:
#     def isAnagram(self, s: str, t: str) -> bool:
#         if len(t) != len(s):
#             return False
#
#         hash_map_s, hash_map_t = {}, {}
#
#         for i in s:
#             if i in hash_map_s:
#                 hash_map_s[i] = hash_map_s[i] + 1
#             else:
#                 hash_map_s[i] = 1
#
#         for i in t:
#             if i in hash_map_t:
#                 hash_map_t[i] = hash_map_t[i] + 1
#             else:
#                 hash_map_t[i] = 1
#
#         return hash_map_s == hash_map_t
#
# s = Solution()
# print(s.isAnagram(s="anagram", t="nagaram"))  # true
# print(s.isAnagram(s="rat", t="car"))  # false

#####################################################################################################

# üå∂Ô∏è 1. Two Sum
#
# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–æ–≤ (nums) –∏ target. –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–∞–∫–∏–µ –¥–≤–∞ –∏–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Å—É–º–º–µ –¥–∞—é—Ç
# target. –í–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å—ã —ç—Ç–∏—Ö —á–∏—Å–µ–ª
#
# 1) Time O(n) Space O(n)
# -- two pass hash table
# class Solution:
#     def twoSum(self, nums: List[int], target: int) -> List[int]:
#         hash_map = {}
#
#         for i in range(len(nums)):
#             hash_map[nums[i]] = i
#
#         for i in range(len(nums)):
#             diff = target - nums[i]
#             if diff in hash_map and i != hash_map[diff]:
#                 return [i, hash_map[diff]]
#
#         return []
#
#
# s = Solution()
# print(s.twoSum(nums=[2, 7, 11, 15], target=9))  # [0,1]
# print(s.twoSum(nums=[3, 2, 4], target=6))  # [1,2]
# print(s.twoSum(nums=[3, 3], target=6))  # [0,1]
#
# 2) Time O(n) Space O(n)
# -- one pass hash table
# class Solution:
#     def twoSum(self, nums: List[int], target: int) -> List[int]:
#         hash_map = {}
#
#         for i in range(len(nums)):
#             diff = target - nums[i]
#
#             if diff in hash_map:
#                 return [i, hash_map[diff]]
#             hash_map[nums[i]] = i
#
#         return []
#
#
# s = Solution()
# print(s.twoSum(nums=[2, 7, 11, 15], target=9))  # [0,1]
# print(s.twoSum(nums=[3, 2, 4], target=6))  # [1,2]
# print(s.twoSum(nums=[3, 3], target=6))  # [0,1]

#####################################################################################################

# üå∂Ô∏è 49. Group Anagrams

# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ (strs), —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å–ª–æ–≤. –ù—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–π –∞–Ω–∞–≥—Ä–∞–º–º—ã
# –≤–º–µ—Å—Ç–µ, —Å–º –ø—Ä–∏–º–µ—Ä –≤ –∫–æ–Ω—Ü–µ, —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç–Ω–æ.

# PRAC:
# 1)
# d = {}
# d['a'].append(1) # error —Ç–∫ –Ω–µ—Ç –∞: []
# print(d)
# 2)
# d = {'a': []}
# d['a'].append(1) # {'a': [1]} --> –¥–æ–±–∞–≤–∏—Ç —Ç–∫ —É–∂–µ –±—ã–ª –∫–ª—é—á  'a'
# print(d)
# 3)
# d = defaultdict(list) # –µ—Å–ª–∏ –∫–ª—é—á–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –≤ –¥–∏–∫—Ç–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ list
# d['a'].append(1) # defaultdict(<class 'list'>, {'a': [1]})
# print(d)
# d['b'] = 1 # –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ list, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Å—Ç 'b': 1
# print(d) # defaultdict(<class 'list'>, {'a': [1], 'b': 1})


# 1) Time O(n * k) Space O(n * k)
# class Solution:
#     def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
#         # —Å–æ–∑–¥–∞–µ–º –¥–∏–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
#         result_dict = defaultdict(list)
#
#         for word in strs:
#             # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–ª–æ–≤–µ
#             char_counter_lst = [0] * 26
#             for i in word:
#                 char_counter_lst[ord(i) - ord('a')] += 1
#
#             # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞, –Ω–∞ –º–µ—Å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ª–æ–≤–æ, —á—Ç–æ "–ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–ª–∏ –ø–æ –±—É–∫–≤–∞–º"
#             # tuple —Ç–∫ –Ω–∞ –º–µ—Å—Ç–µ –∫–ª—é—á–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
#             result_dict[tuple(char_counter_lst)].append(word)
#
#         return list(result_dict.values())
#
#
# s = Solution()
# print(s.groupAnagrams(strs=["eat", "tea", "tan", "ate", "nat", "bat"])) # Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

#####################################################################################################

# üå∂Ô∏è 347. Top K Frequent Elements

# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–æ–≤ (nums) –∏ —Ç–∞—Ä–≥–µ—Ç (k). –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ k –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤
# –∏ –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–∏ —á–∏—Å–ª–∞
# —Ç–µ –µ—Å–ª–∏ nums=[4, 1, -1, 2, -1, 2, 3] –∏ k=2
# Counter({-1: 2, 2: 2, 4: 1, 1: 1, 3: 1}) -- —Ç–æ–ø –¥–≤–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏–º–µ—é—Ç -1 –∏ 2

# Time O(n log n)  Space O(n) (–∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ counter)
# 1) sorting + Counter
# class Solution:
#     def topKFrequent(self, nums: List[int], k: int) -> List[int]:
#         nums_counter = Counter(nums)
#         print(nums_counter)
#         sorted_nums = sorted(nums_counter.items(), key=lambda x: x[1])
#         return [i for i, j in sorted_nums][-k:]
#
#
# s = Solution()
# print(s.topKFrequent(nums=[4, 1, -1, 2, -1, 2, 3], k=2))  # [-1, 2]
# print(s.topKFrequent(nums=[1, 1, 1, 2, 2, 3], k=2))  # [1,2]
# print(s.topKFrequent(nums=[1], k=1))  # [1]
# print(s.topKFrequent(nums=[], k=1))  # []

# 2) Time O(n)  Space O(n)
# bucket sorting
# –ò–¥–µ—è bucket sort:
# –º—ã –∑–∞—Ä–∞–Ω–µ–µ –∑–Ω–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª—é—á–∞, –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–∑–¥–∞—ë–º —Å–≤–æ—ë ¬´–≤–µ–¥—Ä–æ¬ª (bucket), –∫—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã.
# –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏–º –≤—Å–µ –≤–µ–¥—Ä–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã.
# class Solution:
#     def topKFrequent(self, nums: List[int], k: int) -> List[int]:
#         count = {}
#
#         # —Ç—É—Ç –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
#         freq = [[] for i in range(len(nums) + 1)]
#         print(freq)
#
#         # —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ Counter, —Ç–æ–ª—å–∫–æ –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∫–ª—é—á–∞–º
#         # # count[num] = —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è num
#         for num in nums:
#             count[num] = 1 + count.get(num, 0)
#         print(count)
#
#         # freq[cnt] = —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, —É –∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Å—Ç–æ—Ç–∞ cnt
#         for num, cnt in count.items():
#             freq[cnt].append(num)
#         print(freq)
#
#         res = []
#         # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–µ–¥—Ä–∞–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
#         for i in range(len(nums), 0, -1):
#             for j in freq[i]:
#                 res.append(j)
#                 if len(res) == k:
#                     return res
#
#
# s = Solution()
# print(s.topKFrequent(nums=[4, 1, -1, 2, -1, 2, 3], k=2))  # [-1, 2]
# print(s.topKFrequent(nums=[1, 1, 1, 2, 2, 3], k=2))  # [1,2]
# print(s.topKFrequent(nums=[1], k=1))  # [1]
# print(s.topKFrequent(nums=[], k=1))  # []
# print(s.topKFrequent(nums=[1, 2, 3, 1, 3, 4, 4, 4], k=3))  # [test]

#####################################################################################################

# üå∂Ô∏è 238. Product of Array Except Self

# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–æ–≤ (nums), –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–æ–≤ (–∏–∑ nums)
# –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
#
# tip:
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—á–∏—Ç–∞–π —á—Ç–æ-—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# (—Å—É–º–º—É, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ...)
# ‚Äî —ç—Ç–æ –ø—Ä—è–º —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã
#
# pref[i] = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –õ–ï–í–ï–ï –ø–æ–∑–∏—Ü–∏–∏ i (–Ω–µ –≤–∫–ª—é—á–∞—è i).
# suff[i] = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ü–†–ê–í–ï–ï –ø–æ–∑–∏—Ü–∏–∏ i.

# 1) Time O(n)  Space O(n)
# class Solution:
#     def productExceptSelf(self, nums: List[int]) -> List[int]:
#         n = len(nums)
#
#         prefix = [1] * n
#         for i in range(1, n):
#             print(i)
#             prefix[i] = prefix[i - 1] * nums[i - 1]
#         print(prefix)
#
#         suffix = [1] * n
#         for i in range(n - 2, -1, -1):
#             print(i)
#             suffix[i] = suffix[i + 1] * nums[i + 1]
#         print(suffix)
#
#         res = []
#         for i in range(n):
#             res.append(prefix[i] * suffix[i])
#
#         return res
#
#
# s = Solution()
# print(s.productExceptSelf(nums=[1, 2, 3, 4])) # [24,12,8,6]
# print(s.productExceptSelf(nums=[-1, 1, 0, -3, 3])) # [0,0,9,0,0]

#####################################################################################################

# üå∂Ô∏è 36. Valid Sudoku

# –ó–∞–¥–∞—á–∞: –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –ª–∏ —Å—É–¥–æ–∫—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
# 1) Each row must contain the digits 1-9 without repetition.
# 2) Each column must contain the digits 1-9 without repetition.
# 3) Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
#
# squares - —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ 3—Ö3
#      0           1         2
#  0  box(0,0)  box(1,0)  box(2,0)
#  1  box(0,1)  box(1,1)  box(2,1)
#  2  box(0,2)  box(1,2)  box(2,2)

# –µ—Å–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å, —Å–∫–∞–∂–µ–º row –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –±–æ–∫—Å–æ–≤,
# —Ç–æ –ø–æ–ª—É—á–∏–º –∏–Ω–¥–µ–∫—Å –±–æ–∫—Å–∞ –ø–æ row
# —Ç–æ –∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ —Å column
# –∫ –ø—Ä–∏–º–µ—Ä—É –∏–º–µ–µ–º –∏–Ω–¥–µ–∫—Å—ã row = 5 –∏ col = 2
# --> (5 // 3, 2 // 3) --> box(1, 0)

# PRAC
# r = {0: {'5', '3'}}
# print('5' in r[0])

# 1) Time O(9^2)  Space O(9^2)
# class Solution:
#     def isValidSudoku(self, board: List[List[str]]) -> bool:
#         rows = collections.defaultdict(set)
#         cols = collections.defaultdict(set)
#         squares = collections.defaultdict(set) # key = (r // 3, c // 3)
#
#         for r in range(9):
#             for c in range(9):
#                 if board[r][c] == '.':
#                     continue
#                 if (board[r][c] in rows[r] or
#                     board[r][c] in cols[c] or
#                     board[r][c] in squares[(r // 3, c // 3)]
#                 ):
#                     return False
#                 rows[r].add(board[r][c])
#                 cols[c].add(board[r][c])
#                 squares[(r // 3, c // 3)].add(board[r][c])
#
#         return True
#
#
# s = Solution()
# print(s.isValidSudoku(board=[
#     ["5", "3", ".", ".", "7", ".", ".", ".", "."],
#     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
#     [".", "9", "8", ".", ".", ".", ".", "6", "."],
#     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
#     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
#     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
#     [".", "6", ".", ".", ".", ".", "2", "8", "."],
#     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
#     [".", ".", ".", ".", "8", ".", ".", "7", "9"]
# ]))  # True
#
# print(s.isValidSudoku(board=
#                       [     ["8", "3", ".", ".", "7", ".", ".", ".", "."]
#                           , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
#                           , [".", "9", "8", ".", ".", ".", ".", "6", "."]
#                           , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
#                           , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
#                           , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
#                           , [".", "6", ".", ".", ".", ".", "2", "8", "."]
#                           , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
#                           , [".", ".", ".", ".", "8", ".", ".", "7", "9"]])) # False

#####################################################################################################

# üå∂Ô∏è 36. 128. Longest Consecutive Sequence

# –ó–∞–¥–∞—á–∞: –ø–æ–¥–∞–µ—Ç—Å—è not-sorted –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ (nums). –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º –º–∞—Å—Å–∏–≤–µ
# –†–µ—à–∏—Ç—å –∑–∞ O(n)

# 1) Time O(n)  Space O(n)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0

        nums_set = set(nums)
        max_counter = 0

        for i in nums_set:
            if i - 1 not in nums_set:
                x = i
                counter = 1
                while x + 1 in nums_set:
                    counter += 1
                    x += 1
                max_counter = max(counter, max_counter)

        return max_counter


s = Solution()
print(s.longestConsecutive(nums=[100, 4, 200, 1, 3, 2]))  # 4
print(s.longestConsecutive(nums=[0, 3, 7, 2, 5, 8, 4, 6, 0, 1]))  # 9
print(s.longestConsecutive(nums=[1, 0, 1, 2]))  # 3

















